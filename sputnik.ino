/*
  ==============================================================================================================================================
  Project: sputnik IoT Sensor Module – WiFi‑Manager Soft‑AP Fallback **PLUS** 15‑Minute Averaged Google Sheets POST (GMT+8)

  Overview:
    - Portable ESP32‑based module "sputnik".
    - Tries saved Wi‑Fi; if unavailable, opens Soft‑AP **"Sputnik‑Setup" / "sputnik123"** via WiFiManager.
    - Reads DHT21 (AM2301) every minute, updates Arduino IoT Cloud variables (`dhtTemp`, `dhtHumi`).
    - Buffers 15 readings, averages, and POSTS JSON to a Google Apps Script Web App.
    - Keeps same POST URL and JSON schema as baseline sketch.

  Key Features:
    1. **WiFiManager Fallback** (captive portal)  
    2. **Minute‑spaced Sensor Logging** + 15‑min averaged POST  
    3. **NTP Time Sync** (pool.ntp.org) with GMT +8 offset  
    4. **Arduino IoT Cloud Integration**

  Board Requirements:
    - ESP32 (install Espressif core via Boards Manager)

  Library Dependencies:
    - WiFiManager (ESP32 branch) → https://github.com/tzapu/WiFiManager
    - DHT sensor library         → https://github.com/adafruit/DHT-sensor-library
    - Arduino IoT Cloud SDK      (auto‑generated: arduino_secrets.h, thingProperties.h)
    - HTTPClient (built‑in with ESP32 core)

  Pinout & Sensor Wiring:
    - DHT21 data → GPIO 15   (3.3 V & GND accordingly)

  File List:
    - `sputnik.ino`               ← Main sketch (this file)
    - `thingProperties.h`         ← Auto‑generated by Arduino IoT Cloud
    - `arduino_secrets.h`         ← Auto‑generated (unused here)

  Author: Fathurrahman Lananan (Aman)
  Last Modified: 2025‑06‑05
  ==============================================================================================================================================
*/

// ── Conditional includes for ESP32 vs ESP8266 ───────────────────────────────────
#if defined(ESP32)
  #include <WiFi.h>
  #include <WiFiManager.h>
#elif defined(ESP8266)
  #include <ESP8266WiFi.h>
  #include <ESP8266WiFiManager.h>
#else
  #error "Unsupported board: choose ESP32/ESP8266"
#endif

#include <HTTPClient.h>
#include "DHT.h"
#include <time.h>
#include "thingProperties.h"   // binds dhtTemp/dhtHumi & Wi‑Fi creds

// ── Constants ──────────────────────────────────────────────────────────────────
#define DHTPIN   15
#define DHTTYPE  DHT21

#define AP_SSID  "Sputnik-Setup"
#define AP_PASS  "sputnik123"

const char* NTP_SERVER = "pool.ntp.org";
const long  GMT_OFFSET = 8 * 3600;          // GMT+8
const char* POST_URL   = "https://script.google.com/macros/s/AKfycbzcdQJjV7odm73Z5B0zyyVLhqCZZcaRRbypB4TE5a2vXtaNR5nmld4wX6vs4q3KisRfUw/exec";

// ── Globals ────────────────────────────────────────────────────────────────────
DHT dht(DHTPIN, DHTTYPE);
WiFiManager wm;

unsigned long prevMillis = 0;
float tempBuf[15];
float humBuf[15];
int   bufIdx = 0;

// ── Forward declarations ───────────────────────────────────────────────────────
void initWiFi();
void initTime();
void initDHT();
void initCloud();
void collectOneMinute();
void postAveraged();

// ────────────────────────────────────────────────────────────────────────────────
void setup() {
  Serial.begin(9600);
  delay(1500);
  Serial.println("\n===== sputnik IoT Module (WiFi fallback + 15‑min POST) =====");

  initWiFi();
  initTime();
  initDHT();
  initCloud();

  Serial.println("===== Setup complete =====\n");
}

void loop() {
  ArduinoCloud.update();

  struct tm now;
  if (!getLocalTime(&now)) {
    Serial.println("[NTP] No time yet – retry next loop.");
    delay(500);
    return;
  }

  // Run every new minute (sec == 0) or fallback 60 s guard.
  if (now.tm_sec == 0 || millis() - prevMillis >= 60000) {
    prevMillis = millis();
    collectOneMinute();

    // When minute divisible by 15 → average & POST
    if (now.tm_min % 15 == 0) {
      postAveraged();
      bufIdx = 0; // reset buffer
    }

    // safety overflow
    if (bufIdx >= 15) bufIdx = 0;
  }
}

// ── Initialisation helpers ─────────────────────────────────────────────────────
void initWiFi() {
  Serial.println("[WiFi] Attempting saved creds, else Soft‑AP portal…");
  if (!wm.autoConnect(AP_SSID, AP_PASS)) {
    Serial.println("[WiFi] Portal failed, restarting…");
    delay(3000);
    ESP.restart();
  }
  Serial.print("[WiFi] Connected → IP: "); Serial.println(WiFi.localIP());
}

void initTime() {
  configTime(GMT_OFFSET, 0, NTP_SERVER);
  Serial.print("[NTP] Syncing");
  for (int i=0;i<5;++i){ struct tm t; if(getLocalTime(&t)){Serial.println(" OK"); return;} Serial.print('.'); delay(1000);} Serial.println(" failed, continuing");
}

void initDHT() { dht.begin(); Serial.println("[DHT] Sensor ready"); }

void initCloud() {
  initProperties();
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  Serial.println("[Cloud] Connected");
}

// ── Data collection & posting ──────────────────────────────────────────────────
void collectOneMinute() {
  float h = dht.readHumidity();
  float t = dht.readTemperature();

  dhtHumi = h;  // push to IoT Cloud
  dhtTemp = t;

  char ts[9]; struct tm now; getLocalTime(&now); snprintf(ts,sizeof(ts),"%02d:%02d:%02d",now.tm_hour,now.tm_min,now.tm_sec);
  Serial.printf("[Minute] %s | T: %.2f °C | H: %.2f %%\n", ts, t, h);

  tempBuf[bufIdx] = (!isnan(t) && t>=0)? t : NAN;
  humBuf [bufIdx] = (!isnan(h) && h>=0)? h : NAN;
  ++bufIdx;
}

void postAveraged() {
  float sumT=0,sumH=0; int valid=0;
  for(int i=0;i<bufIdx;++i){ if(!isnan(tempBuf[i]) && !isnan(humBuf[i])){ sumT+=tempBuf[i]; sumH+=humBuf[i]; ++valid; }}
  if(valid==0){ Serial.println("[POST] No valid readings to average."); return; }

  float avgT = sumT/valid; float avgH = sumH/valid;
  Serial.printf("[POST] 15‑min AVG → T: %.2f °C | H: %.2f %%\n", avgT, avgH);

  if (WiFi.status()!=WL_CONNECTED){ Serial.println("[POST] Wi‑Fi lost, skip send"); return; }

  HTTPClient http; http.begin(POST_URL); http.setFollowRedirects(HTTPC_STRICT_FOLLOW_REDIRECTS); http.addHeader("Content-Type","application/json; charset=utf-8");
  String payload = String("{") + "\"temperature\":"+String(avgT,2)+ ",\"humidity\":"+String(avgH,2)+ ",\"mcu\":\"sputnik1\"}";
  Serial.println("[POST] JSON → "+payload);
  int code=http.POST(payload);
  if(code>0){ Serial.print("[POST] HTTP "); Serial.println(code); Serial.println(http.getString()); }
  else{ Serial.printf("[POST] Failed: %s (%d)\n", http.errorToString(code).c_str(), code); }
  http.end();
}

// End of sputnik.ino (WiFi fallback + 15‑min POST) --------------------------------------------------------------
