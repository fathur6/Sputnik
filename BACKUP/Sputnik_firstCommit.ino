/*
  ==============================================================================================================================================
  Project: sputnik IoT Sensor Module – 15‑Minute Averaged Google Sheets POST (GMT+8)

  Overview:
    - This **baseline** sketch targets an ESP32‑based module named "sputnik".
    - It connects directly to a *single* predefined Wi‑Fi network (`SSID`, `PASS`) declared in **thingProperties.h**.
    - Every minute it samples temperature & humidity from a DHT21 (AM2301).  After exactly 15 readings it
      *averages* the valid values and posts them as JSON to a Google Apps Script Web App.
    - It also publishes the *latest* sensor reading to Arduino IoT Cloud variables `dhtTemp` and `dhtHumi`.

  Key Features:
    1. **Direct Wi‑Fi STA Connection** (uses credentials from `thingProperties.h`).
    2. **Minute‑spaced Sensor Logging** with 15‑minute averaging & POST to Google Sheets.
    3. **NTP Time Synchronisation** (pool.ntp.org, GMT +8 offset).
    4. **Arduino IoT Cloud Integration** to view live data.

  Board Requirements:
    - **ESP32** board selected in Arduino IDE / Arduino Cloud.

  Library Dependencies:
    - **DHT sensor library**   → https://github.com/adafruit/DHT-sensor-library
    - **Arduino IoT Cloud SDK** (auto‑generated files: arduino_secrets.h, thingProperties.h)
    - **HTTPClient** (built‑in in ESP32 core) for JSON POST.

  Pinout & Sensor Wiring:
    - DHT21 data line → **GPIO 15**
    - 3.3 V and GND   → DHT21 VCC & GND

  File List:
    - `sputnik.ino`                   ← Main sketch (this file)
    - `thingProperties.h`             ← Auto‑generated by Arduino IoT Cloud (property definitions & Wi‑Fi creds)
    - `arduino_secrets.h`             ← Auto‑generated (device key, Wi‑Fi creds if using Arduino Cloud)

  Author: Fathurrahman Lananan (Aman)
  Last Modified: 2025‑06‑05
  ==============================================================================================================================================
*/

#include <WiFi.h>              // ESP32 Wi‑Fi functions
#include <HTTPClient.h>        // For REST/JSON POST
#include "DHT.h"               // DHT sensor driver
#include <time.h>              // NTP time functions
#include "thingProperties.h"   // Wi‑Fi credentials + IoT Cloud variables

// ────────────────────────────────────────────────────────────────────────────────
// Constants & Globals
// ────────────────────────────────────────────────────────────────────────────────
#define DHTPIN   15            // GPIO pin connected to DHT21 data line
#define DHTTYPE  DHT21         // Sensor type: DHT21 (AM2301)

const char* NTP_SERVER = "pool.ntp.org";               // NTP server
const long  GMT_OFFSET = 8 * 3600;                     // GMT+8 (seconds)
const char* POST_URL   = "https://script.google.com/macros/s/AKfycbzcdQJjV7odm73Z5B0zyyVLhqCZZcaRRbypB4TE5a2vXtaNR5nmld4wX6vs4q3KisRfUw/exec";

DHT dht(DHTPIN, DHTTYPE);

// Circular buffers (15 slots) to hold minute‑paced readings
float tempArr[15];
float humArr[15];
int   dataCount = 0;

// ────────────────────────────────────────────────────────────────────────────────
// Forward Declarations
// ────────────────────────────────────────────────────────────────────────────────
void initializeWiFi();
void initializeTime();
void initializeDHT();
void initializeCloud();
void sendAveragedDataGoogle(float avgT, float avgH, const char* mcuName);

// ────────────────────────────────────────────────────────────────────────────────
// Setup
// ────────────────────────────────────────────────────────────────────────────────
void setup() {
  Serial.begin(9600);
  delay(1500);
  Serial.println("\n===== sputnik IoT Module Starting (baseline) =====");

  initializeWiFi();
  initializeTime();
  initializeDHT();
  initializeCloud();

  Serial.println("===== Setup Complete =====\n");
}

// ────────────────────────────────────────────────────────────────────────────────
// Main Loop
// ────────────────────────────────────────────────────────────────────────────────
void loop() {
  ArduinoCloud.update();

  static int lastMinute = -1;        // track minute roll‑over
  static int lastPostedMinute = -1;  // ensure one POST per 15‑min slot

  struct tm timeinfo;
  if (!getLocalTime(&timeinfo)) {
    Serial.println("[NTP] Failed to get time, skipping loop iteration …");
    delay(1000);
    return;
  }

  int currentMin = timeinfo.tm_min;

  // ── Trigger once per new minute ────────────────────────────────────────────
  if (currentMin != lastMinute) {
    lastMinute = currentMin;

    // Read sensor
    float h = dht.readHumidity();
    float t = dht.readTemperature();

    // Update Cloud variables regardless of averaging window
    dhtHumi = h;
    dhtTemp = t;

    Serial.printf("Time: %02d:%02d:%02d | T: %.2f °C | H: %.2f %%\n",
                  timeinfo.tm_hour, timeinfo.tm_min, timeinfo.tm_sec, t, h);

    // Store only valid readings
    tempArr[dataCount] = (!isnan(t) && t >= 0) ? t : NAN;
    humArr[dataCount]  = (!isnan(h) && h >= 0) ? h : NAN;
    dataCount++;

    // ── Every 15th minute ──────────────────────────────────────────────────
    if (currentMin % 15 == 0 && currentMin != lastPostedMinute) {
      lastPostedMinute = currentMin;

      // Compute averages of valid data
      float sumT = 0, sumH = 0;  int valid = 0;
      for (int i = 0; i < dataCount; ++i) {
        if (!isnan(tempArr[i]) && !isnan(humArr[i])) {
          sumT += tempArr[i];
          sumH += humArr[i];
          valid++;
        }
      }

      if (valid > 0) {
        float avgT = sumT / valid;
        float avgH = sumH / valid;
        Serial.printf("Posting 15‑min AVG → T: %.2f °C | H: %.2f %%\n", avgT, avgH);
        sendAveragedDataGoogle(avgT, avgH, "sputnik1");
      } else {
        Serial.println("[WARN] No valid readings in this 15‑minute window – nothing posted.");
      }
      dataCount = 0; // reset buffer index
    }

    // Safety: reset buffer if it ever overruns
    if (dataCount >= 15) dataCount = 0;
  }
}

// ────────────────────────────────────────────────────────────────────────────────
// Helper Functions
// ────────────────────────────────────────────────────────────────────────────────

void initializeWiFi() {
  Serial.print("[WiFi] Connecting to: ");
  Serial.println(SSID);            // SSID from thingProperties.h
  WiFi.begin(SSID, PASS);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print('.');
  }
  Serial.println("\n[WiFi] Connected – IP: " + WiFi.localIP().toString());
}

void initializeTime() {
  configTime(GMT_OFFSET, 0, NTP_SERVER);
  Serial.println("[NTP] Time config requested (GMT+8)… waiting up to 5 s…");
  for (int i = 0; i < 5; ++i) {
    struct tm tmp;
    if (getLocalTime(&tmp)) {
      Serial.println("[NTP] Sync OK.");
      return;
    }
    delay(1000);
  }
  Serial.println("[NTP] Initial sync failed – continuing.");
}

void initializeDHT() {
  dht.begin();
  Serial.println("[DHT] Sensor initialised.");
}

void initializeCloud() {
  initProperties();
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  Serial.println("[Cloud] Arduino IoT Cloud ready.");
}

void sendAveragedDataGoogle(float temperature, float humidity, const char* mcuName) {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("[HTTP] Wi‑Fi not connected – abort POST.");
    return;
  }

  HTTPClient http;
  http.begin(POST_URL);
  http.setFollowRedirects(HTTPC_STRICT_FOLLOW_REDIRECTS);
  http.addHeader("Content-Type", "application/json; charset=utf-8");

  // Build JSON payload correctly (escaped quotes)
  String payload = String("{") +
                   "\"temperature\":" + String(temperature, 2) +
                   ",\"humidity\":"   + String(humidity, 2) +
                   ",\"mcu\":\""      + String(mcuName) + "\"}";

  Serial.print("[HTTP] Sending → ");
  Serial.println(payload);

  int code = http.POST(payload);
  if (code > 0) {
    Serial.print("[HTTP] Response code: "); Serial.println(code);
    Serial.println(http.getString());
  } else {
    Serial.printf("[HTTP] POST failed: %s (%d)\n", http.errorToString(code).c_str(), code);
  }
  http.end();
}

// End of sputnik.ino (baseline) -------------------------------------------------------------------------------------------
