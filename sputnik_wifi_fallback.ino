/*
  ==============================================================================
  Project: Sputnik IoT Sensor Module with Soft-AP WiFi Fallback
  
  Description:
    This sketch runs on an ESP32-based module named "Sputnik". It performs:
      1. Automatic connection to WiFi using saved credentials.
         - If WiFi fails or no credentials exist, it creates a Soft-AP named "Sputnik-Setup"
           with password "sputnik123" and a captive portal (via WiFiManager) for new credentials.
      2. Temperature and humidity readings from a DHT21 (AM2301) sensor, logged once per minute.
      3. Synchronization of local time via NTP (pool.ntp.org).
      4. Data publishing to Arduino IoT Cloud using "thingProperties.h" generated properties.

  Dependencies:
    - WiFiManager library (https://github.com/tzapu/WiFiManager)
    - DHT sensor library
    - Arduino IoT Cloud SDK (thingProperties.h, arduino_secrets.h)

  Hardware Setup:
    - DHT21 data pin connected to GPIO 15
    - ESP32 module with WiFi radio

  Author: Fathurrahman Lananan (Aman)
  Last Modified: 2025-06-05
  ==============================================================================
*/

#include "arduino_secrets.h"      // Network credentials (unused if WiFiManager runs)
#include "thingProperties.h"      // Generated by Arduino IoT Cloud for property definitions
#include "DHT.h"                 // DHT sensor library
#include <time.h>                  // NTP time functions
#include <WiFiManager.h>           // WiFiManager for captive-portal setup

// Pin and sensor type definitions
#define DHTPIN     15               // GPIO pin connected to DHT21 data line
#define DHTTYPE    DHT21             // Sensor type: DHT21 (AM2301)

// Instantiate global objects
DHT dht(DHTPIN, DHTTYPE);            // DHT sensor object
WiFiManager wm;                       // WiFiManager object for Soft-AP and portal

// Timing and network globals
unsigned long previousMillis = 0;     // Stores last measurement time (milliseconds)
const char* ntpServer = "pool.ntp.org";  // NTP server for time synchronization

void setup() {
  // -- Serial and Debug Initialization --
  Serial.begin(9600);
  delay(1500);  // Brief pause for serial monitor readiness
  Serial.println("\n===== Sputnik IoT Module Starting =====");

  // -- WiFi Setup: AutoConnect with Soft-AP Fallback --
  Serial.println("[WiFi] Attempting to connect using stored credentials...");
  bool connected = wm.autoConnect("Sputnik-Setup", "sputnik123");
  if (!connected) {
    // If connection or config portal fails, restart the ESP32
    Serial.println("[WiFi] Failed to connect or config portal timed out.");
    Serial.println("[WiFi] Restarting device in 3 seconds...");
    delay(3000);
    ESP.restart();
    return; // safety, though ESP.restart() resets
  }
  // At this point, WiFi is connected or new creds saved via Portal
  Serial.print("[WiFi] Connected. IP Address: ");
  Serial.println(WiFi.localIP());

  // -- Initialize DHT Sensor --
  dht.begin();
  Serial.println("[DHT] Sensor initialization complete.");

  // -- Initialize NTP Time Synchronization --
  configTime(0, 0, ntpServer);
  Serial.println("[NTP] Time synchronization setup complete.");

  // -- Initialize Arduino IoT Cloud --
  // 'initProperties()' defined in thingProperties.h, sets up properties & callbacks
  initProperties();
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  Serial.println("[Cloud] Arduino IoT Cloud connected.");

  Serial.println("===== Setup Complete =====\n");
}

void loop() {
  // Required for Arduino Cloud to handle incoming/outgoing data
  ArduinoCloud.update();

  // Get local time struct for timestamp decisions
  struct tm timeinfo;
  if (getLocalTime(&timeinfo)) {
    // We choose to read & print once per minute, at second == 0 or every 60,000ms
    if (timeinfo.tm_sec == 0 || millis() - previousMillis >= 60000) {
      previousMillis = millis();

      // -- Reading from DHT Sensor --
      float humidity = dht.readHumidity();
      float temperature = dht.readTemperature();

      // If readings fail, DHT library returns NAN
      if (isnan(humidity) || isnan(temperature)) {
        Serial.println("[DHT] Failed to read sensor data!");
      } else {
        // Update global IoT Cloud variables (defined in thingProperties.h)
        dhtHumi = humidity;
        dhtTemp = temperature;

        // Serial print for debugging & logging
        Serial.print("[Data] Time: ");
        Serial.printf("%02d:%02d:%02d", timeinfo.tm_hour, timeinfo.tm_min, timeinfo.tm_sec);
        Serial.print(" | Temp: ");
        Serial.print(temperature);
        Serial.print(" Â°C | Humidity: ");
        Serial.print(humidity);
        Serial.println(" %");
      }
    }
  } else {
    // If local time not available, print warning and attempt again next loop
    Serial.println("[NTP] Failed to obtain time. Retrying...");
  }
  // ** End of loop iteration **
}
