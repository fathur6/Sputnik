/*
  ==============================================================================================================================================
  Project: Sputnik IoT Sensor Module with Soft-AP WiFi Fallback
  
  Overview:
    - This sketch targets an ESP32-based module named "Sputnik".
    - It attempts to connect using stored WiFi credentials; if that fails, it opens a Soft Access Point (AP) "Sputnik-Setup"
      (password: "sputnik123") with a captive portal (WiFiManager) so the user can input new credentials. Once provided, 
      WiFiManager saves them to NVS and the device restarts.
    - After successful WiFi, it initializes a DHT21 (AM2301) sensor to measure temperature and humidity once per minute,
      synchronizes time via NTP (pool.ntp.org), and publishes sensor data to Arduino IoT Cloud via properties defined in
      "thingProperties.h".

  Key Features:
    1. **WiFiManager Fallback** (Soft-AP + Captive Portal)
    2. **DHT21 Sensor Readings** (Temperature & Humidity)
    3. **NTP Time Synchronization**
    4. **Arduino IoT Cloud Integration**

  Board Requirements:
    - **ESP32** (must select an ESP32 board in Arduino IDE or CLI)
    - Ensure the **ESP32 core** is installed (via Boards Manager).

  Library Dependencies:
    - **WiFiManager** by tzapu (ESP32 branch) → https://github.com/tzapu/WiFiManager
      * NOTE: There are separate libraries for ESP8266 and ESP32. Be sure to install the ESP32-compatible version.
    - **DHT sensor library** → https://github.com/adafruit/DHT-sensor-library
    - **Arduino IoT Cloud SDK** (Generated files: arduino_secrets.h, thingProperties.h)
    - **Built-in ESP32 libraries:** WiFi.h, time.h

  Pinout & Sensor Wiring:
    - DHT21 data line → **GPIO 15**
    - 3.3V and GND → DHT21 VCC and GND

  File List:
    - `sputnik_wifi_fallback.ino`         ← Main sketch (this file)
    - `thingProperties.h`               ← Auto-generated by Arduino IoT Cloud (property definitions)
    - `arduino_secrets.h`                ← Auto-generated (unused if WiFiManager runs)

  Author: Fathurrahman Lananan (Aman)
  Last Modified: 2025-06-05
  ==============================================================================================================================================
*/

// Conditional includes for ESP32 vs ESP8266:
#if defined(ESP32)
  #include <WiFi.h>               // Built-in ESP32 WiFi functions
  #include <WiFiManager.h>        // WiFiManager (ESP32-compatible branch)
#elif defined(ESP8266)
  #include <ESP8266WiFi.h>         // ESP8266 WiFi functions
  #include <ESP8266WiFiManager.h>  // WiFiManager for ESP8266 (inc. captive portal)
#else
  #error "[ERROR] Unsupported board: Select an ESP32 or ESP8266 in Arduino IDE/CLI."
#endif

#include "arduino_secrets.h"    // Arduino IoT Cloud secrets (not used if WiFiManager fetches creds)
#include "thingProperties.h"    // Auto-generated by Arduino Cloud (synchronizes variables)
#include "DHT.h"               // DHT sensor driver
#include <time.h>               // NTP time functions

// Constants ----------------------------------------------------------------------
#define DHTPIN     15           // GPIO pin connected to DHT21 data line (adjust if needed)
#define DHTTYPE    DHT21         // Sensor type: DHT21 (AM2301)

#define AP_SSID    "Sputnik-Setup"  // SSID for Soft-AP fallback
#define AP_PASS    "sputnik123"     // Password for Soft-AP fallback

// Globals ------------------------------------------------------------------------
DHT dht(DHTPIN, DHTTYPE);        // DHT sensor object
WiFiManager wm;                   // WiFiManager instance for captive portal

unsigned long previousMillis = 0; // Timestamp of last sensor read (ms)
const char* ntpServer = "pool.ntp.org"; // NTP server address for time sync

// Forward declarations -----------------------------------------------------------
void initializeWiFi();
void initializeDHT();
void initializeTime();
void initializeCloud();
void readAndPublishSensorData();

void setup() {
  // ---------------------- Serial Debug Setup ----------------------
  Serial.begin(9600);
  delay(1500);  // Give time for serial monitor to initialize
  Serial.println("\n===== Sputnik IoT Module Starting =====");

  // ---------------------- Initialize WiFi + Soft-AP Fallback ----------------------
  initializeWiFi();

  // ---------------------- Initialize DHT Sensor ----------------------
  initializeDHT();

  // ---------------------- Initialize NTP Time ----------------------
  initializeTime();

  // ---------------------- Initialize Arduino IoT Cloud ----------------------
  initializeCloud();

  Serial.println("===== Setup Complete =====\n");
}

void loop() {
  // Maintain Arduino IoT Cloud connection (handles callbacks automatically)
  ArduinoCloud.update();

  // Check if it’s time to read sensor data (once per minute)
  struct tm timeinfo;
  bool timeAvailable = getLocalTime(&timeinfo);

  if (timeAvailable) {
    // Only run data read when sec == 0 OR 60 seconds elapsed (prevents drift)
    if (timeinfo.tm_sec == 0 || millis() - previousMillis >= 60000) {
      previousMillis = millis();
      readAndPublishSensorData();
    }
  } else {
    // Time not yet synchronized; retry next loop
    Serial.println("[NTP] Failed to get time; retrying...");
  }
}

// ====================================================================================
// Function: initializeWiFi()
// Purpose : Attempt to connect to saved WiFi. If failure or no credentials exist, 
//           WiFiManager opens Soft-AP "Sputnik-Setup" (passwd "sputnik123") with a captive portal.
//           Once new creds are provided, device restarts and reconnects.
// ====================================================================================
void initializeWiFi() {
  Serial.println("[WiFi] Attempting auto-connect (Station mode)...");

  // The autoConnect() call blocks until one of two things happens:
  //  1) It connects to the saved WiFi network
  //  2) It fails after a default timeout (~ 60 seconds) and opens Soft-AP portal
  bool connected = wm.autoConnect(AP_SSID, AP_PASS);

  if (!connected) {
    // If config portal times out or fails, restart the ESP32/ESP8266
    Serial.println("[WiFi] Connection/config portal failed. Restarting in 3 seconds...");
    delay(3000);
    ESP.restart();
    return;
  }

  // If we reach here, we have valid WiFi credentials (either previously saved or newly entered)
  Serial.print("[WiFi] Connected. Local IP: ");
  Serial.println(WiFi.localIP());
}

// ====================================================================================
// Function: initializeDHT()
// Purpose : Initialize the DHT21 sensor for humidity & temperature readings.
// ====================================================================================
void initializeDHT() {
  dht.begin();
  Serial.println("[DHT] Sensor initialization complete.");
}

// ====================================================================================
// Function: initializeTime()
// Purpose : Configure NTP using configTime() and wait briefly for time sync.
// ====================================================================================
void initializeTime() {
  configTime(0, 0, ntpServer);
  Serial.println("[NTP] Time synchronization setup called. Waiting for valid time...");

  // Wait up to 5 seconds to get initial time
  for (int i = 0; i < 5; i++) {
    struct tm temp;
    if (getLocalTime(&temp)) {
      Serial.println("[NTP] Time synchronized successfully.");
      return;
    }
    Serial.print(".");
    delay(1000);
  }
  Serial.println("[NTP] Warning: Initial time sync failed; continuing anyway.");
}

// ====================================================================================
// Function: initializeCloud()
// Purpose : Initialize Arduino IoT Cloud, set debug level, and print info to Serial.
// ====================================================================================
void initializeCloud() {
  initProperties();  // Defined in thingProperties.h; binds variables and callbacks
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  setDebugMessageLevel(2);          // Level 2 = show connection attempts & errors
  ArduinoCloud.printDebugInfo();    // Prints server, IP, MAC, etc.
  Serial.println("[Cloud] Arduino IoT Cloud connected.");
}

// ====================================================================================
// Function: readAndPublishSensorData()
// Purpose : Read from DHT21, update global properties (dhtHumi, dhtTemp),
//           and print formatted data to Serial.
// ====================================================================================
void readAndPublishSensorData() {
  float humidity = dht.readHumidity();
  float temperature = dht.readTemperature();

  // If the sensor fails, DHT library returns NaN
  if (isnan(humidity) || isnan(temperature)) {
    Serial.println("[DHT] Error: Failed to read from DHT sensor.");
    return;
  }

  // Update Arduino IoT Cloud variables (defined in thingProperties.h)
  dhtHumi = humidity;
  dhtTemp = temperature;

  // Print data with timestamp to Serial for debugging
  struct tm now;
  getLocalTime(&now);                // We assume time is already valid
  char ts[9];                        // Buffer for HH:MM:SS
  snprintf(ts, sizeof(ts), "%02d:%02d:%02d", now.tm_hour, now.tm_min, now.tm_sec);

  Serial.print("[Data] "); 
  Serial.print(ts);
  Serial.print(" | Temp: ");   Serial.print(temperature);  Serial.print(" °C");
  Serial.print(" | Humidity: "); Serial.print(humidity);     Serial.println(" %");
}

// End of Sputnik_WiFiFallback.ino -------------------------------------------------------------------------------------------
